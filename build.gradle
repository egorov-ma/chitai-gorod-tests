plugins {
    id 'java'
    id 'io.freefair.lombok' version '6.0.0-m2'
    id('io.qameta.allure') version '2.11.2'
}

group = 'ru.chitaigorod'
version = '1.0'

def selenideVersion = "6.19.1",
    javaFakerVersion = "1.0.2",
    jschVersion = "0.1.55",
    ownerVersion = "1.0.12",
    webdrivermanagerVersion = "5.6.3",
    slf4jVersion = "2.0.9",
    junitVersion = "5.10.1",
    allureVersion = "2.24.0",
    restAssuredVersion = "5.4.0",
    jacksonVersion = "2.16.1",
    assertjVersion = "3.25.3",
    awaitilityVersion = "4.2.0"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "com.jcraft:jsch:$jschVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.github.bonigarcia:webdrivermanager:$webdrivermanagerVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.awaitility:awaitility:$awaitilityVersion")
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion")
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.register('api_test', Test) {
    useJUnitPlatform {
        includeTags("api")
    }
}